#!/usr/bin/env python3

import json
import locale
import sys

#modules used for the project created in the linux instance
##########################################################
#import reports
#import emails
##########################################################

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  most_sales = 0
  most_popular_year ={}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales
    if item["total_sales"] > most_sales:
      most_sales = item["total_sales"]
      most_sold_car = format_car(item["car"])
    # TODO: also handle most popular car_year
    most_popular_year.setdefault(item["car"]["car_year"],0)
    most_popular_year[item["car"]["car_year"]] += 1

  most_popular_year_val = None
  num_sales = 0

  for key,value in most_popular_year.items():
    if value > num_sales:
      num_sales = value
      most_popular_year_val = key

  summary = [
    "The {} generated the most revenue: ${}<br/>".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    f"The{most_sold_car} had the most sales:{most_sales}<br/>",
    f"The most popular year was {most_popular_year_val} with {num_sales} sales."
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


#modules from linux instance need to be implemented to run this script

def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report
  add_info = " ".join(summary)
  #reports.generate("/tmp/cars.pdf","Car sales data",add_info,cars_dict_to_table(data))
  # TODO: send the PDF report as an email attachment
  email_body = [x.replace("<br/>","\n") for x in summary]
  email_body = "".join(email_body)
  #msg =emails.generate("automation@example.com","student-02-0bbc87838815@example.com","Sales summary for last month",email_body,"/tmp/cars.pdf")
  #emails.send(msg)
if __name__ == "__main__":
  main(sys.argv)

